{"version":3,"sources":["ng://ngx-bad-phone-spinner/lib/models/lock-options.model.ts","ng://ngx-bad-phone-spinner/lib/models/ngx-bad-phone-spinner.model.ts","ng://ngx-bad-phone-spinner/lib/range/range.pipe.ts","ng://ngx-bad-phone-spinner/lib/range/range.module.ts","ng://ngx-bad-phone-spinner/lib/ngx-bad-phone-spinner/ngx-bad-phone-spinner.component.ts","ng://ngx-bad-phone-spinner/lib/ngx-bad-phone-spinner.module.ts"],"names":["LockOptions","IGNORE","LIAR","MANUAL","ORDER","RANDOM","REVERSE","SHUFFLE","NgxBadPhoneSpinnerOptions","this","locks","unlocks","shuffleMilliseconds","shufflesPerClick","RangePipe","prototype","transform","items","quantity","length","i","push","Pipe","args","name","pure","RangeModule","NgModule","declarations","exports","imports","CommonModule","FormsModule","NgxBadPhoneSpinnerComponent","_propagateChange","fullNumber","digits","lockIcons","lockColors","disabled","isRandomizing","options","change","EventEmitter","Object","defineProperty","candidates","split","parseInt","writeValue","value","registerOnChange","fn","registerOnTouched","_onTouched","setDisabledState","isDisabled","toggleLock","_this","canChange","indexOf","Math","random","setTimeout","showLockIcon","_onChange","randomizeDigit","increment","round","shuffleLock","shuffleUnlock","i_1","clearLocks","reset","randomize","emit","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Input","Output","NgxBadPhoneSpinnerModule","entryComponents","BrowserModule"],"mappings":"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","sourcesContent":["export enum LockOptions {\n  IGNORE = 'ignore',\n  LIAR = 'liar',\n  MANUAL = 'manual',\n  ORDER = 'order',\n  RANDOM = 'random',\n  REVERSE = 'reverse',\n  SHUFFLE = 'shuffle',\n}\n","import {LockOptions} from './lock-options.model';\n\nexport class NgxBadPhoneSpinnerOptions {\n  public locks:LockOptions[] = [\n    LockOptions.MANUAL\n  ];\n\n  public unlocks:LockOptions[] = [\n    LockOptions.MANUAL\n  ];\n\n  public shuffleMilliseconds = 200;\n  public shufflesPerClick = 5;\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'range',\n  pure: false\n})\nexport class RangePipe implements PipeTransform {\n  transform(items:any[], quantity:number):any {\n    items.length = 0;\n\n    for (let i = 0; i < quantity; i++) {\n      items.push(i);\n    }\n\n    return items;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {RangePipe} from './range.pipe';\n\n@NgModule({\n  declarations: [\n    RangePipe\n  ],\n  exports: [\n    RangePipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ]\n})\nexport class RangeModule {}\n","import {Component, EventEmitter, forwardRef, Input, Output} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {LockOptions} from '../models/lock-options.model';\nimport {NgxBadPhoneSpinnerOptions} from '../models/ngx-bad-phone-spinner.model';\n\n@Component({\n  selector:    'ngx-bad-phone-spinner',\n  templateUrl: './ngx-bad-phone-spinner.component.html',\n  styleUrls: [\n    './ngx-bad-phone-spinner.component.scss'\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxBadPhoneSpinnerComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgxBadPhoneSpinnerComponent implements ControlValueAccessor {\n  private _onTouched:() => void;\n  private _propagateChange:any = () => {};\n\n  public fullNumber:string = '0000000000';\n  public digits:number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  public locks:boolean[] = [false, false, false, false, false, false, false, false, false, false];\n  public lockIcons:boolean[] = [false, false, false, false, false, false, false, false, false, false];\n  public lockColors:boolean[] = [false, false, false, false, false, false, false, false, false, false];\n\n  public disabled:boolean = false;\n  public isRandomizing:boolean = false;\n\n  @Input() options:NgxBadPhoneSpinnerOptions = new NgxBadPhoneSpinnerOptions();\n\n  @Input()\n  set number(digits:string) {\n    const candidates = digits.split('');\n\n    for (let i = 0; i < 10; i++) {\n      this.digits[i] = typeof candidates[i] !== 'undefined' ? parseInt(candidates[i], 10) :0;\n    }\n  }\n\n  @Output() change:EventEmitter<string>;\n\n  constructor() {\n    this.change = new EventEmitter<string>();\n  }\n\n  writeValue(value:string):void {\n    this.fullNumber = value || '0000000000';\n  }\n\n  registerOnChange(fn:any):void {\n    this._propagateChange = fn;\n  }\n\n  registerOnTouched(fn:any):void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled:boolean):void {\n    this.disabled = isDisabled;\n  }\n\n  toggleLock(i:number):void {\n    let canChange = true;\n    if (i !== 0) {\n      if (this.options.locks.indexOf(LockOptions.ORDER) !== -1) {\n        if (i !== 0) {\n          if (this.locks[i - 1] === false) {\n            canChange = false;\n          }\n        }\n      }\n\n      if (this.options.unlocks.indexOf(LockOptions.ORDER) !== -1) {\n        if (i !== 0) {\n          if (this.locks[i - 1] === true) {\n            canChange = false;\n          }\n        }\n      }\n      if (this.options.locks.indexOf(LockOptions.REVERSE) !== -1) {\n        if (i + 1 < this.locks.length) {\n          if (this.locks[i + 1] === false) {\n            canChange = false;\n          }\n        }\n      }\n\n      if (this.options.unlocks.indexOf(LockOptions.REVERSE) !== -1) {\n        if (i + 1 < this.locks.length) {\n          if (this.locks[i + 1] === true) {\n            canChange = false;\n          }\n        }\n      }\n    }\n\n    if (this.options.unlocks.indexOf(LockOptions.IGNORE) !== -1 && Math.random() < 0.5) {\n      canChange = false;\n    }\n\n    if (this.options.locks.indexOf(LockOptions.IGNORE) !== -1 && Math.random() < 0.5) {\n      canChange = false;\n    }\n\n    if (canChange) {\n      this.locks[i] = !this.locks[i];\n\n      if (this.locks[i]) {\n        if (this.options.unlocks.indexOf(LockOptions.RANDOM) !== -1) {\n          setTimeout(\n            () => {\n              this.locks[i] = false;\n            },\n            Math.random() * 1000 * 60\n          );\n        }\n      } else {\n        if (this.options.locks.indexOf(LockOptions.RANDOM) !== -1) {\n          setTimeout(\n            () => {\n              this.locks[i] = true;\n            },\n            Math.random() * 1000 * 60\n          );\n        }\n      }\n\n      this.lockColors[i] = this.showLockIcon(i);\n      this.lockIcons[i] = this.showLockIcon(i);\n\n      this._onChange();\n    }\n  }\n\n  randomizeDigit(i:number, increment?:number):void {\n    this.isRandomizing = true;\n\n    this.digits[i] = Math.round(Math.random() * 9);\n\n    if (typeof increment === 'undefined') {\n      increment = this.options.shufflesPerClick;\n      increment--;\n    }\n\n    if (increment !== 0) {\n      increment--;\n\n      setTimeout(\n        () => {\n          this.randomizeDigit(i, increment);\n        },\n        this.options.shuffleMilliseconds\n      );\n    } else {\n      this.isRandomizing = false;\n\n      const shuffleLock = this.options.locks.indexOf(LockOptions.SHUFFLE) !== -1;\n      const shuffleUnlock = this.options.unlocks.indexOf(LockOptions.SHUFFLE) !== -1;\n      if (shuffleLock || shuffleUnlock) {\n        for (let i = 0; i < 10; i++) {\n          if (this.locks[i] === false && shuffleLock) {\n            this.locks[i] = true;\n          }\n\n          if (this.locks[i] === true && shuffleUnlock) {\n            this.locks[i] = false;\n          }\n\n          this.lockColors[i] = this.showLockIcon(i);\n          this.lockIcons[i] = this.showLockIcon(i);\n        }\n      }\n    }\n  }\n\n  clearLocks():void {\n    for (let i = 0; i < 10; i++) {\n      this.locks[i] = false;\n      this.lockColors[i] = this.showLockIcon(i);\n      this.lockIcons[i] = this.showLockIcon(i);\n    }\n  }\n\n  reset():void {\n    this.clearLocks();\n    this.randomize();\n  }\n\n  randomize():void {\n    for (let i = 0; i < 10; i++) {\n      if (this.locks[i] === false) {\n        this.randomizeDigit(i);\n      }\n    }\n  }\n\n  showLockIcon(i:number):boolean {\n    let showLockIcon = this.locks[i];\n\n    if (this.locks[i] === true && this.options.locks.indexOf(LockOptions.LIAR) !== -1) {\n      if (Math.random() < 0.25) {\n        showLockIcon = !this.locks[i];\n      }\n    } else if (this.locks[i] === false && this.options.unlocks.indexOf(LockOptions.LIAR) !== -1) {\n      if (Math.random() < 0.25) {\n        showLockIcon = !this.locks[i];\n      }\n    }\n\n    return showLockIcon;\n  }\n\n  private _onChange():void {\n    this.fullNumber = '';\n    for (let i = 0; i < 10; i++) {\n      this.fullNumber += '' + this.digits[i];\n    }\n\n    this._propagateChange(this.fullNumber);\n    this.change.emit(this.fullNumber);\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {BrowserModule} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {NgxBadPhoneSpinnerComponent} from './ngx-bad-phone-spinner/ngx-bad-phone-spinner.component';\nimport {RangeModule} from './range/range.module';\n\n@NgModule({\n  declarations: [\n    NgxBadPhoneSpinnerComponent\n  ],\n  entryComponents: [\n    NgxBadPhoneSpinnerComponent\n  ],\n  exports: [\n    NgxBadPhoneSpinnerComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    FormsModule,\n    RangeModule\n  ],\n  providers: []\n})\nexport class NgxBadPhoneSpinnerModule { }\n"]}