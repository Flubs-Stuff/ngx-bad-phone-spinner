{"version":3,"sources":["ng://ngx-bad-phone-spinner/lib/ngx-bad-phone-spinner.model.ts","ng://ngx-bad-phone-spinner/lib/ngx-bad-phone-spinner/ngx-bad-phone-spinner.component.ts","ng://ngx-bad-phone-spinner/lib/range.pipe.ts","ng://ngx-bad-phone-spinner/lib/ngx-bad-phone-spinner.module.ts"],"names":["NgxBadPhoneSpinnerOptions","this","locks","LockOptions","MANUAL","unlocks","shuffleMilliseconds","shufflesPerClick","IGNORE","LIAR","ORDER","RANDOM","REVERSE","SHUFFLE","NgxBadPhoneSpinnerComponent","_propagateChange","fullNumber","digits","lockIcons","lockColors","disabled","isRandomizing","options","change","EventEmitter","Object","defineProperty","prototype","candidates","split","i","parseInt","writeValue","value","registerOnChange","fn","registerOnTouched","_onTouched","setDisabledState","isDisabled","toggleLock","_this","canChange","indexOf","length","Math","random","setTimeout","showLockIcon","_onChange","randomizeDigit","increment","round","shuffleLock","shuffleUnlock","i_1","clearLocks","reset","randomize","emit","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Input","Output","RangePipe","transform","items","quantity","push","Pipe","name","pure","NgxBadPhoneSpinnerModule","NgModule","declarations","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["export class NgxBadPhoneSpinnerOptions {\n  public locks:LockOptions[] = [\n    LockOptions.MANUAL\n  ];\n\n  public unlocks:LockOptions[] = [\n    LockOptions.MANUAL\n  ];\n\n  public shuffleMilliseconds = 200;\n  public shufflesPerClick = 5;\n}\n\nexport enum LockOptions {\n  IGNORE = 'ignore',\n  LIAR = 'liar',\n  MANUAL = 'manual',\n  ORDER = 'order',\n  RANDOM = 'random',\n  REVERSE = 'reverse',\n  SHUFFLE = 'shuffle',\n}\n","import {Component, EventEmitter, forwardRef, Input, Output} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {LockOptions, NgxBadPhoneSpinnerOptions} from '../ngx-bad-phone-spinner.model';\n\n@Component({\n  selector:    'ngx-bad-phone-spinner',\n  templateUrl: './ngx-bad-phone-spinner.component.html',\n  styleUrls: [\n    './ngx-bad-phone-spinner.component.scss'\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxBadPhoneSpinnerComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgxBadPhoneSpinnerComponent implements ControlValueAccessor {\n  private _onTouched:() => void;\n  private _propagateChange:any = () => {};\n\n  public fullNumber:string = '0000000000';\n  public digits:number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  public locks:boolean[] = [false, false, false, false, false, false, false, false, false, false];\n  public lockIcons:boolean[] = [false, false, false, false, false, false, false, false, false, false];\n  public lockColors:boolean[] = [false, false, false, false, false, false, false, false, false, false];\n\n  public disabled:boolean = false;\n  public isRandomizing:boolean = false;\n\n  @Input() options:NgxBadPhoneSpinnerOptions = new NgxBadPhoneSpinnerOptions();\n\n  @Input()\n  set number(digits:string) {\n    const candidates = digits.split('');\n\n    for (let i = 0; i < 10; i++) {\n      this.digits[i] = typeof candidates[i] !== 'undefined' ? parseInt(candidates[i], 10) :0;\n    }\n  }\n\n  @Output() change:EventEmitter<string>;\n\n  constructor() {\n    this.change = new EventEmitter<string>();\n  }\n\n  writeValue(value:string):void {\n    this.fullNumber = value || '0000000000';\n  }\n\n  registerOnChange(fn:any):void {\n    this._propagateChange = fn;\n  }\n\n  registerOnTouched(fn:any):void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled:boolean):void {\n    this.disabled = isDisabled;\n  }\n\n  toggleLock(i:number):void {\n    let canChange = true;\n    if (i !== 0) {\n      if (this.options.locks.indexOf(LockOptions.ORDER) !== -1) {\n        if (i !== 0) {\n          if (this.locks[i - 1] === false) {\n            canChange = false;\n          }\n        }\n      }\n\n      if (this.options.unlocks.indexOf(LockOptions.ORDER) !== -1) {\n        if (i !== 0) {\n          if (this.locks[i - 1] === true) {\n            canChange = false;\n          }\n        }\n      }\n      if (this.options.locks.indexOf(LockOptions.REVERSE) !== -1) {\n        if (i + 1 < this.locks.length) {\n          if (this.locks[i + 1] === false) {\n            canChange = false;\n          }\n        }\n      }\n\n      if (this.options.unlocks.indexOf(LockOptions.REVERSE) !== -1) {\n        if (i + 1 < this.locks.length) {\n          if (this.locks[i + 1] === true) {\n            canChange = false;\n          }\n        }\n      }\n    }\n\n    if (this.options.unlocks.indexOf(LockOptions.IGNORE) !== -1 && Math.random() < 0.5) {\n      canChange = false;\n    }\n\n    if (this.options.locks.indexOf(LockOptions.IGNORE) !== -1 && Math.random() < 0.5) {\n      canChange = false;\n    }\n\n    if (canChange) {\n      this.locks[i] = !this.locks[i];\n\n      if (this.locks[i]) {\n        if (this.options.unlocks.indexOf(LockOptions.RANDOM) !== -1) {\n          setTimeout(\n            () => {\n              this.locks[i] = false;\n            },\n            Math.random() * 1000 * 60\n          );\n        }\n      } else {\n        if (this.options.locks.indexOf(LockOptions.RANDOM) !== -1) {\n          setTimeout(\n            () => {\n              this.locks[i] = true;\n            },\n            Math.random() * 1000 * 60\n          );\n        }\n      }\n\n      this.lockColors[i] = this.showLockIcon(i);\n      this.lockIcons[i] = this.showLockIcon(i);\n\n      this._onChange();\n    }\n  }\n\n  randomizeDigit(i:number, increment?:number):void {\n    this.isRandomizing = true;\n\n    this.digits[i] = Math.round(Math.random() * 9);\n\n    if (typeof increment === 'undefined') {\n      increment = this.options.shufflesPerClick;\n      increment--;\n    }\n\n    if (increment !== 0) {\n      increment--;\n\n      setTimeout(\n        () => {\n          this.randomizeDigit(i, increment);\n        },\n        this.options.shuffleMilliseconds\n      );\n    } else {\n      this.isRandomizing = false;\n\n      const shuffleLock = this.options.locks.indexOf(LockOptions.SHUFFLE) !== -1;\n      const shuffleUnlock = this.options.unlocks.indexOf(LockOptions.SHUFFLE) !== -1;\n      if (shuffleLock || shuffleUnlock) {\n        for (let i = 0; i < 10; i++) {\n          if (this.locks[i] === false && shuffleLock) {\n            this.locks[i] = true;\n          }\n\n          if (this.locks[i] === true && shuffleUnlock) {\n            this.locks[i] = false;\n          }\n\n          this.lockColors[i] = this.showLockIcon(i);\n          this.lockIcons[i] = this.showLockIcon(i);\n        }\n      }\n    }\n  }\n\n  clearLocks():void {\n    for (let i = 0; i < 10; i++) {\n      this.locks[i] = false;\n      this.lockColors[i] = this.showLockIcon(i);\n      this.lockIcons[i] = this.showLockIcon(i);\n    }\n  }\n\n  reset():void {\n    this.clearLocks();\n    this.randomize();\n  }\n\n  randomize():void {\n    for (let i = 0; i < 10; i++) {\n      if (this.locks[i] === false) {\n        this.randomizeDigit(i);\n      }\n    }\n  }\n\n  showLockIcon(i:number):boolean {\n    let showLockIcon = this.locks[i];\n\n    if (this.locks[i] === true && this.options.locks.indexOf(LockOptions.LIAR) !== -1) {\n      if (Math.random() < 0.25) {\n        showLockIcon = !this.locks[i];\n      }\n    } else if (this.locks[i] === false && this.options.unlocks.indexOf(LockOptions.LIAR) !== -1) {\n      if (Math.random() < 0.25) {\n        showLockIcon = !this.locks[i];\n      }\n    }\n\n    return showLockIcon;\n  }\n\n  private _onChange():void {\n    this.fullNumber = '';\n    for (let i = 0; i < 10; i++) {\n      this.fullNumber += '' + this.digits[i];\n    }\n\n    this._propagateChange(this.fullNumber);\n    this.change.emit(this.fullNumber);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'range',\n  pure: false\n})\nexport class RangePipe implements PipeTransform {\n  transform(items:any[], quantity:number):any {\n    items.length = 0;\n\n    for (let i = 0; i < quantity; i++) {\n      items.push(i);\n    }\n\n    return items;\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { NgxBadPhoneSpinnerComponent } from './ngx-bad-phone-spinner/ngx-bad-phone-spinner.component';\nimport { RangePipe } from './range.pipe';\n\n@NgModule({\n  declarations: [\n    NgxBadPhoneSpinnerComponent,\n    RangePipe\n  ],\n  exports: [\n    NgxBadPhoneSpinnerComponent,\n    RangePipe\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgxBadPhoneSpinnerModule { }\n"]}